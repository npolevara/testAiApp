<div class="d-flex justify-content-between align-items-center mb-3">
  <h1>Task Details</h1>
  <div class="d-flex gap-2">
    <%= link_to "Edit", edit_task_path(@task), class: "btn btn-primary" %>
    <%= link_to "Back to List", tasks_path, class: "btn btn-secondary" %>
  </div>
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header">
        <h3>Task #<%= @task.id %>: <%= @task.title %></h3>
      </div>
      <div class="card-body">
        <div class="row mb-3">
          <div class="col-md-6">
            <strong>Status:</strong>
            <% case @task.status %>
            <% when 'To Do' %>
              <span class="badge badge-secondary">To Do</span>
            <% when 'In Progress' %>
              <span class="badge badge-warning">In Progress</span>
            <% when 'Done' %>
              <span class="badge badge-success">Done</span>
            <% end %>
          </div>
          <div class="col-md-6">
            <strong>Priority:</strong>
            <% case @task.priority %>
            <% when 'High' %>
              <span class="badge badge-danger">High</span>
            <% when 'Medium' %>
              <span class="badge badge-warning">Medium</span>
            <% when 'Low' %>
              <span class="badge badge-info">Low</span>
            <% end %>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col-md-6">
            <strong>Assignee:</strong>
            <%= @task.user.name %>
          </div>
          <div class="col-md-6">
            <strong>Created Date:</strong>
            <%= @task.created_at.strftime("%B %d, %Y at %I:%M %p") %>
          </div>
        </div>

        <% if @task.due_date %>
        <div class="row mb-3">
          <div class="col-md-6">
            <strong>Due Date:</strong>
            <%= @task.due_date.strftime("%B %d, %Y") %>
            <% if @task.due_date < Date.current %>
              <span class="badge badge-danger">Overdue</span>
            <% elsif @task.due_date <= Date.current + 3.days %>
              <span class="badge badge-warning">Due Soon</span>
            <% end %>
          </div>
        </div>
        <% end %>

        <div class="mb-3">
          <strong>Description:</strong>
          <div class="mt-2">
            <% if @task.description.present? %>
              <p style="white-space: pre-wrap;"><%= @task.description %></p>
            <% else %>
              <p class="text-muted">No description provided.</p>
            <% end %>
          </div>
        </div>

        <div class="mt-4">
          <strong>Quick Status Update:</strong>
          <div class="mt-2 d-flex gap-2">
            <% Task.statuses.each do |status| %>
              <% if status != @task.status %>
                <%= link_to status,
                    task_path(@task, task: { status: status }),
                    method: :patch,
                    class: "btn btn-sm #{'btn-success' if status == 'Done'} #{'btn-warning' if status == 'In Progress'} #{'btn-secondary' if status == 'To Do'}",
                    confirm: "Change status to #{status}?" %>
              <% end %>
            <% end %>
          </div>
        </div>

        <div class="mt-4 d-flex gap-2">
          <%= link_to "Delete Task",
              task_path(@task),
              method: :delete,
              class: "btn btn-danger",
              confirm: "Are you sure you want to delete '#{@task.title}'? This action cannot be undone." %>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h4>Task History</h4>
      </div>
      <div class="card-body">
        <% if @task_history.present? %>
          <div class="timeline">
            <% @task_history.each do |history_item| %>
              <div class="timeline-item mb-3">
                <div class="timeline-marker"></div>
                <div class="timeline-content">
                  <strong><%= history_item[:event] %></strong><br>
                  <small class="text-muted">
                    by <%= history_item[:user] %><br>
                    <%= history_item[:timestamp].strftime("%m/%d/%Y at %I:%M %p") %>
                  </small>
                </div>
              </div>
            <% end %>
          </div>
        <% else %>
          <p class="text-muted">No history available.</p>
        <% end %>
      </div>
    </div>
</div>
</div>

<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h4>Comments</h4>
        <span id="comment-count" class="badge badge-secondary">0</span>
      </div>
      <div class="card-body">
        <!-- Comments will be loaded here -->
        <div id="comments-container">
          <div id="comments-loading" class="text-center text-muted">
            Loading comments...
          </div>
          <div id="comments-list"></div>
        </div>
        
        <!-- Add new comment form -->
        <div class="mt-4 border-top pt-3">
          <form id="comment-form">
            <div class="mb-3">
              <label for="comment-content" class="form-label">Add a comment</label>
              <textarea 
                id="comment-content" 
                name="comment[content]" 
                class="form-control" 
                rows="3" 
                placeholder="Write your comment here..."
                maxlength="1000"
                required
              ></textarea>
              <div class="form-text">
                <span id="comment-char-count">0</span>/1000 characters
              </div>
            </div>
            <button type="submit" class="btn btn-primary" id="submit-comment">
              Add Comment
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .row {
    display: flex;
    flex-wrap: wrap;
    margin: -0.5rem;
  }
  .col-md-6 {
    flex: 0 0 50%;
    padding: 0.5rem;
  }
  .col-md-8 {
    flex: 0 0 66.666667%;
    padding: 0.5rem;
  }
  .col-md-4 {
    flex: 0 0 33.333333%;
    padding: 0.5rem;
  }
  .timeline {
    position: relative;
    padding-left: 1.5rem;
  }
  .timeline::before {
    content: '';
    position: absolute;
    left: 0.5rem;
    top: 0;
    bottom: 0;
    width: 2px;
    background-color: #dee2e6;
  }
  .timeline-item {
    position: relative;
  }
  .timeline-marker {
    position: absolute;
    left: -2rem;
    top: 0.25rem;
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
    background-color: #007bff;
    border: 2px solid white;
    box-shadow: 0 0 0 2px #dee2e6;
  }
  .timeline-content {
    background-color: #f8f9fa;
    padding: 0.75rem;
    border-radius: 0.25rem;
    border-left: 3px solid #007bff;
  }
  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.8rem;
  }
  
  /* Comment Styles */
  .comment-item {
    border-left: 3px solid #007bff;
    background-color: #f8f9fa;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 0.25rem;
    position: relative;
  }
  
  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .comment-user {
    font-weight: bold;
    color: #007bff;
  }
  
  .comment-role {
    font-size: 0.8rem;
    color: #6c757d;
    margin-left: 0.5rem;
  }
  
  .comment-time {
    font-size: 0.8rem;
    color: #6c757d;
  }
  
  .comment-content {
    white-space: pre-wrap;
    word-wrap: break-word;
    line-height: 1.5;
  }
  
  .comment-actions {
    position: absolute;
    top: 1rem;
    right: 1rem;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  .comment-item:hover .comment-actions {
    opacity: 1;
  }
  
  .delete-comment {
    background: none;
    border: none;
    color: #dc3545;
    font-size: 0.8rem;
    cursor: pointer;
    padding: 0.25rem;
  }
  
  .delete-comment:hover {
    color: #c82333;
  }
  
  .no-comments {
    text-align: center;
    color: #6c757d;
    font-style: italic;
    padding: 2rem;
  }
  
  .form-text {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 0.25rem;
  }
  
  .comment-form-loading {
    opacity: 0.6;
    pointer-events: none;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const taskId = <%= @task.id %>;
  const commentsContainer = document.getElementById('comments-list');
  const commentsLoading = document.getElementById('comments-loading');
  const commentCount = document.getElementById('comment-count');
  const commentForm = document.getElementById('comment-form');
  const commentContent = document.getElementById('comment-content');
  const commentCharCount = document.getElementById('comment-char-count');
  const submitButton = document.getElementById('submit-comment');
  
  // Character counter
  commentContent.addEventListener('input', function() {
    const count = this.value.length;
    commentCharCount.textContent = count;
    
    if (count > 1000) {
      commentCharCount.style.color = '#dc3545';
    } else if (count > 900) {
      commentCharCount.style.color = '#ffc107';
    } else {
      commentCharCount.style.color = '#6c757d';
    }
  });
  
  // Load comments on page load
  loadComments();
  
  // Submit comment form
  commentForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const content = commentContent.value.trim();
    if (!content) return;
    
    // Show loading state
    commentForm.classList.add('comment-form-loading');
    submitButton.textContent = 'Adding...';
    
    fetch(`/tasks/${taskId}/comments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        comment: {
          content: content
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.errors) {
        alert('Error: ' + data.errors.join(', '));
      } else {
        // Clear form
        commentContent.value = '';
        commentCharCount.textContent = '0';
        commentCharCount.style.color = '#6c757d';
        
        // Reload comments
        loadComments();
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while adding the comment.');
    })
    .finally(() => {
      // Remove loading state
      commentForm.classList.remove('comment-form-loading');
      submitButton.textContent = 'Add Comment';
    });
  });
  
  function loadComments() {
    commentsLoading.style.display = 'block';
    commentsContainer.style.display = 'none';
    
    fetch(`/tasks/${taskId}/comments`)
      .then(response => response.json())
      .then(comments => {
        renderComments(comments);
        updateCommentCount(comments.length);
      })
      .catch(error => {
        console.error('Error loading comments:', error);
        commentsContainer.innerHTML = '<div class="alert alert-danger">Error loading comments</div>';
      })
      .finally(() => {
        commentsLoading.style.display = 'none';
        commentsContainer.style.display = 'block';
      });
  }
  
  function renderComments(comments) {
    if (comments.length === 0) {
      commentsContainer.innerHTML = '<div class="no-comments">No comments yet. Be the first to comment!</div>';
      return;
    }
    
    const commentsHtml = comments.map(comment => `
      <div class="comment-item" data-comment-id="${comment.id}">
        <div class="comment-header">
          <div>
            <span class="comment-user">${escapeHtml(comment.user_name)}</span>
            <span class="comment-role">(${escapeHtml(comment.user_role)})</span>
          </div>
          <span class="comment-time">${escapeHtml(comment.created_at)}</span>
        </div>
        <div class="comment-content">${escapeHtml(comment.content)}</div>
        <div class="comment-actions">
          <button type="button" class="delete-comment" onclick="deleteComment(${comment.id})" title="Delete comment">
            Delete
          </button>
        </div>
      </div>
    `).join('');
    
    commentsContainer.innerHTML = commentsHtml;
  }
  
  function updateCommentCount(count) {
    commentCount.textContent = count;
    commentCount.className = count > 0 ? 'badge badge-primary' : 'badge badge-secondary';
  }
  
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  // Make deleteComment available globally
  window.deleteComment = function(commentId) {
    if (!confirm('Are you sure you want to delete this comment?')) {
      return;
    }
    
    fetch(`/tasks/${taskId}/comments/${commentId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (response.ok) {
        loadComments(); // Reload comments
      } else {
        alert('Error deleting comment');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while deleting the comment.');
    });
  };
});
</script>
